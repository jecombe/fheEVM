/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "EncryptedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EncryptedERC20__factory>;
    getContractFactory(
      name: "FheAMM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FheAMM__factory>;
    getContractFactory(
      name: "EIP712WithModifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712WithModifier__factory>;
    getContractFactory(
      name: "FhevmLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FhevmLib__factory>;

    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "EncryptedERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EncryptedERC20>;
    getContractAt(
      name: "FheAMM",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FheAMM>;
    getContractAt(
      name: "EIP712WithModifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712WithModifier>;
    getContractAt(
      name: "FhevmLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FhevmLib>;

    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "EncryptedERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC20>;
    deployContract(
      name: "FheAMM",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FheAMM>;
    deployContract(
      name: "EIP712WithModifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712WithModifier>;
    deployContract(
      name: "FhevmLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhevmLib>;

    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "EncryptedERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EncryptedERC20>;
    deployContract(
      name: "FheAMM",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FheAMM>;
    deployContract(
      name: "EIP712WithModifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712WithModifier>;
    deployContract(
      name: "FhevmLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FhevmLib>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
